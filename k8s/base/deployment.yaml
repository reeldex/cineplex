# ============================================================================
# KUBERNETES DEPLOYMENT CONFIGURATION EXPLAINED
# ============================================================================
# A Deployment is like a "recipe" that tells Kubernetes HOW to run your
# application. It manages the lifecycle of your pods (containers), handles
# scaling, rolling updates, and ensures your desired number of replicas
# are always running.
# ============================================================================

# API version and resource type declaration
apiVersion: apps/v1               # Uses the apps/v1 API group for Deployments
kind: Deployment                  # Declares this as a Deployment resource
metadata:
  name: cineplex                  # The name of this Deployment in Kubernetes
  labels:                         # Labels attached to the Deployment itself
    app: cineplex                 # Helps organize and filter Deployments, These labels are on the Deployment, not the pods!
spec:
  replicas: 2                     # HOW MANY identical copies of your app to run
  selector:                       # How the Deployment identifies "its" pods
    matchLabels:                  # Pods must have ALL these labels to belong here
      app: cineplex               # The Deployment manages pods with this label, MUST MATCH the labels in template.metadata.labels below!
  template:                       # This is the "blueprint" for creating pods
    metadata:
      labels:                     # Labels applied to EACH POD created
        app: cineplex             # CRITICAL: Must match selector.matchLabels above!
    spec:
      containers:                 # List of containers in each pod (usually just 1)
        - name: cineplex          # Name of the container (for identification)
          image: slash3b/cineplex:v1.1.6  # Your Docker image from Docker Hub
          env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "otel-collector-opentelemetry-collector.monitoring.svc.cluster.local:4318" # <service_name><namespace>.svc.cluster.local:4318
            - name: OTEL_SERVICE_NAME
              value: "cineplex"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=cineplex,service.version=1.1.6"
            - name: SCRAPE_INTERVAL
              value: "120"
          ports:
            - containerPort: 8080
          resources:              # Controls CPU and memory usage
            limits:
              memory: "256Mi"     # Maximum 256 Megabytes of RAM
              cpu: "250m"         # Maximum 0.25 CPU cores, "m" = millicores (1000m = 1 full CPU core)
            requests:
              memory: "128Mi"     # Kubernetes GUARANTEES this much RAM
              cpu: "125m"         # Kubernetes GUARANTEES 0.125 CPU cores
          livenessProbe:
            httpGet:
              path: /livez
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
